apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: aws-account-vending
  title: AWS Account Vending Request
  description: Request a new AWS account via AFT
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters: 
  - title: Fill in required steps
    required:
      - accountName
      - ownerEmail
      - environment
    properties:
      accountName:
        title: AWS Account
        description: Enter the name for the new AWS Account
        type: string
      environment:
        title: Environment
        description: Select the env for this account
        enum:
          - dev
          - test
          - prod
      ownerEmail:
        title: AWS Account Owner
        description: Enter the email address of the AWS Account Owner
        type: string

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          accountName: ${{ parameters.accountName }}
          environment: ${{ parameters.environment }}
          ownerEmail: ${{ parameters.ownerEmail }}
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        defaultBranch: main
        description: This is ${{ parameters.accountName }}
        repoUrl: github.com?owner=${{ steps.environment.output.githubOrgId }}&repo=${{ parameters.accountName }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    # Each step executes an action, in this case one templates files into the working directory.
    # - id: submit-request
    #   name: Submit
    #   action: humanitec.submitAccountRequest
    #   input:
    #     accountName: ${{ parameters.accountName }}
    #     environment: ${{ parameters.environment }}
    #     ownerEmail: ${{ parameters.ownerEmail }}

  output:
      links:
        - title: Repository
          url: ${{ steps['publish'].output.remoteUrl }}
        - title: Open in catalog
          icon: catalog
          entityRef: ${{ steps['register'].output.entityRef }}